# Bloque para mandos IR

Comenzemos!!! üöÄ
Esto es lo que te vas a encontrar en este proyecto.

Un bloque para conectar la se√±al de entrada de un sensor IR y convertir el protocolo de comunicaci√≥n de NEC a una salida binaria de 5 bits.

**Aqu√≠ os dejo algunos ejemplos del contenido**

* Este es el bloque montado en un ejemplo simple.
<p align="center">
  <img src="https://github.com/altenife/Things-cosas-icestudio/blob/master/Bloques/Mando%20IR/Imagenes/Ejemplo%201.png"></p>

* Este es el dise√±o del bloque por dentro.
<p align="center">
  <img src="https://github.com/altenife/Things-cosas-icestudio/blob/master/Bloques/Mando%20IR/Imagenes/Proyecto.png"></p>
  


¬øComo funciona? üîß

Este bloque lo que hace es convertir las se√±ales luminosas de los mandos IR con protoco NEC (que son inmensa mayoria de los mandos chinos que venden) a un simple numero binario.
Para poder hacerlo, primero necesitamos saber como funciona dicho protocolo.

El protocolo NEC utiliza pulsos a distancia para la transmisi√≥n de un mensaje.
Cada r√°faga de pulsos tiene una duraci√≥n de 562.5 Œºs a una frecuencia de 38Khz.
Para transmitir los bits correspondientes al mensaje, lo hace de la siguiente manera:

‚Äì 0 l√≥gico: Env√≠a un pulso de 562,5 Œºs, seguido de un espacio de 562,5 Œºs de duraci√≥n,  con un tiempo de transmisi√≥n de 1,125 ms.</br>
‚Äì 1 l√≥gico: Env√≠a un pulso de 562,5 Œºs seguido de un espacio de 1.6875 ms  de duraci√≥n, con un tiempo de transmisi√≥n de 2,25 ms.

Al pulsar una tecla del mando, el mensaje se compone de la siguiente cadena de pulsos:

1) Una r√°faga de pulsos de 9 ms.
2) Un espacio 4,5 ms
3) La direcci√≥n para el dispositivo receptor (8 bits) (00000000)
4) El inverso l√≥gico de la direcci√≥n (8 bits) (11111111)
5) El comando (8 bits)
6) El inverso l√≥gico del comando (8 bits)
7) Un pulso de 562.5 Œºs para indicar el final de la transmisi√≥n del mensaje.

<p align="center">
  <img src="https://github.com/altenife/Things-cosas-icestudio/blob/master/Bloques/Mando%20IR/Imagenes/Protocolo%20NEC.png"></p>
  
Lo que hace el bloque es esperar los 9ms + los 4ms del comienzo de la se√±al, recibe los siguientes 32 Bits, los 16 primeros corresponden al codigo del dispositivo receptor, los cuales son un codigo de 8 Bits "00000000" y los compara con su negada "11111111" si coinciden,
se activa una puerta and para permitir el tick a los siguientes 16 Bits, que corresponden a los 8 Bits del comando mas los 8 bits del comando pero negados, y si estos tambien coniciden nos habilita la se√±ar de carga del registro.
Con esto evitamos interferencias y aseguramos que recibimos el codigo correcto.

* En esta imagen podemos analizar como se comporta el protocolo NEC enviando el codigo del boton "cero" que corresponde con el codigo 0x16E9

-RX corresponde a los pulsos recibidos del sensor IR. </br>
-D1 al tic de desplazamiento del registro de datos.</br>
-D2 no lo tengais en cuenta, solo fue una prueba que hice de otra lectura.</br>
-D3 corresponde al Tic de carga del registro. Cuando recibe este tick se envia el dato. </br>
-D4 al tiempo que se encuentra activo el biestable y puede recibir lecturas.


<p align="center">
  <img src="https://github.com/altenife/Things-cosas-icestudio/blob/master/Bloques/Mando%20IR/Imagenes/0.png"></p>
  
  Adicionalmente genera otro pulso si mantenemos apretado el bot√≥n para reenviar continuamente el mismo codigo, pero he decidido inhibirlo por el momento.
  
  
## Proyectos construidos con üõ†Ô∏è

* [Icestudio](https://github.com/FPGAwars/icestudio) - El software libre para FPGAs por excelencia

## Agradecimientos: üñáÔ∏è

* **Democrito** - [Democrito](https://github.com/Democrito) Por ayudarme con el Codificador 21-5.


## Autores ‚úíÔ∏è

* **Alberto Nicas** - *Creador* - [Altenife](https://github.com/altenife)

## Expresiones de Gratitud üéÅ

* Si te gusta, comparte este proyecto üì¢
* Mencioname si mejoras este proyecto ü§ì.
* Mencioname si utilizas este PCBPrint en tus proyectos.


---
‚å®Ô∏è con ‚ù§Ô∏è por [Altenife](https://github.com/altenife) üòä
